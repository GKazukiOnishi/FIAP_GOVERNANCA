Tipos de sistemas: ERP, BI, etc. (slides)

Erro no início (bug, planejamento) do projeto custando 70x a 1000x mais

Importância da avaliação de software durante todo o ciclo

Reaproveitamento com impacto em massa (software de iluminação em jogo)

Evolução

	Anos 40 e 50: máquinas limitadas, código complexo, software simples e pequeno
	Anos 60 e 70: software ainda simples mas menos complexo, 3 geração
	Programas individuais até então, não afeta outros
	Anos 80: Surgimento dos PCs, plataforma para desenvolvedor, software mais complexos
		(incentivo a programadores)
		Bancos de dados
	Redes e conexão, um pode interferir no outro
	Anos 90: Surge reuso de software, uso em negócios
	2000 a 2010: Equipes gigantes, software gigantes
	
	Antes era um teste mais individual
	Só nos anos 80 surgiram ferramentas e modelos de teste
	90: automação de testes, avaliação da qualidade
	
	Anos 90 temos padrões, COBIT, ITIL, ISO
	2000 a 2010: SCRUM, UML, SOA, BPM, TOGAF
	Recente: Produção integrada de software (DEVOPS)
	


JUNIT:
	Dá para fazer os testes antes do programa:
	Ex: Calculadora
		1- Somar 1 com 1, dando 2
		2- Multiplicar 2 com 2, dando 4
		3- Subtrair 8 de 58, dando 50
		4- Dividir 50 por 5, dando 10
	Premissa Keep it Simple -> evitar deixar teste mais complicado que o próprio código
	
	Erro -> estourou erro, classe não resolve
	Falha -> Algum problema na lógica, não deu no que deveria, deu em outra